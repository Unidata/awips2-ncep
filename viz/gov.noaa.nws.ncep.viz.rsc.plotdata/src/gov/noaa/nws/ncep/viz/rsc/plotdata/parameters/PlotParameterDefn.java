//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.10.21 at 08:54:29 AM EDT 
//


package gov.noaa.nws.ncep.viz.rsc.plotdata.parameters;

import gov.noaa.nws.ncep.viz.rsc.plotdata.plotModels.S2N;

import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import com.raytheon.uf.common.serialization.ISerializableObject;


/**
 * 
 */
@XmlRootElement(name = "PlotParameterDefn")
@XmlAccessorType(XmlAccessType.NONE)
public class PlotParameterDefn implements ISerializableObject {

    @XmlAttribute
    protected String plotParamName;  // ex. 'TMPF'

    // for barb and arrow plotModes this will be a list of 2 metParamNames, 1 for 
    // the magnitude and 1 for the direction.
    @XmlAttribute
    protected String metParamName;    // ex 'Temperature'

    @XmlAttribute
    protected String plotMode="text";

    // If dbParameName is set and deriveParams is set then the code will
    // attempt to compute the parameter if the db value is missing.
    //
    @XmlAttribute
    protected String dbParamName;   // ex. 'temperature'
    
    @XmlAttribute
    protected String deriveParams;  // 'all' or <metParamName,metParamName...>
    

    // TODO: change this to be dfltPlotUnit since we may 
    // want to add the ability for the user to select the units in the 
    // plotModel
    // Note: for vector Barbs/Arrows this is the units of the Magnitude.
    @XmlAttribute
    protected String plotUnit; 
    
    @XmlAttribute
    protected String plotFormat;
    
    // for plot parameters which need to determine
    // their value from an array of values. (Was plotFunctionTable attribute)
    @XmlAttribute
    protected String prioritySelectTable;
    
    protected S2N prioritySelector=null;
    
    @XmlAttribute
    protected String plotLookupTable;
    
    // For parameters stored as arrays (and no prioritySelectTable given) 
    // the array index specifies which index to show. (ex. For Metar presentWeather)
	@XmlAttribute
    protected Integer arrayIndex=0;

    @XmlAttribute
    protected String symbolFont;
    
    @XmlAttribute
    protected String transform;
    
    @XmlAttribute
    protected String plotTrim;

    public String getPlotParamName() {
		return plotParamName;
	}
    
    public  String[] metParamNamesForVectorPlot = null;
    
	public void setPlotParamName(String plotParamName) {
		this.plotParamName = plotParamName;
	}

    public String getMetParamName() {
		return metParamName;
	}
    
//    public Boolean isDerivable() {
//    	
//    }

	public void setMetParamName(String metParamName) {
		this.metParamName = metParamName;
	}

	/**
     * Gets the value of the plotMode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlotMode() {
        return plotMode;
    }

    /**
     * Sets the value of the plotMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlotMode(String value) {
        this.plotMode = value;
    }

    /**
     * Gets the value of the plotParam property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDbParamName() {
        return dbParamName;
    }

    
    public void setDeriveParams(String value) {
        this.deriveParams = value;
    }

    
    public String[] getDeriveParams() {
    	if( deriveParams == null ) {
    		return null;
    	}
    	
		String paramNames[] = deriveParams.split(",");
		
		if( paramNames.length == 0 ) {
			System.out.println("Error parsing the derived parameter names ("+
					deriveParams + ") for PlotParameter " + plotParamName );			
		}

        return paramNames;
    }

    /**
     * Sets the value of the plotParam property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbParamName(String value) {
        this.dbParamName = value;
    }

    /**
     * Gets the value of the plotUnit property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlotUnit() {
        return plotUnit;
    }

    /**
     * Sets the value of the plotUnit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlotUnit(String value) {
        this.plotUnit = value;
    }

    /**
     * Gets the value of the plotFormat property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlotFormat() {
        return plotFormat;
    }

    /**
     * Sets the value of the plotFormat property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlotFormat(String value) {
        this.plotFormat = value;
    }

    /**
     * Gets the value of the arrayIndex property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrioritySelectTable() {
        return prioritySelectTable;
    }

    public S2N getPrioritySelector() {
    	if( prioritySelector == null ) {
			if( prioritySelectTable != null ) {
				prioritySelector = S2N.readS2NFile( 
						prioritySelectTable );				
			}
    	}
    	
    	return prioritySelector;
    }
    
    public void setPrioritySelectTable(String prioritySelectTable) {
        this.prioritySelectTable = prioritySelectTable;
    }

    /**
     * Gets the value of the plotLookupTable property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlotLookupTable() {
        return plotLookupTable;
    }

    public Integer getArrayIndex() {
		return arrayIndex;
	}

	public void setArrayIndex(Integer arrayIndex) {
		this.arrayIndex = arrayIndex;
	}


    /**
     * Sets the value of the plotLookupTable property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlotLookupTable(String value) {
        this.plotLookupTable = value;
    }

    public String getSymbolFont() {
        return symbolFont;
    }

    public void setSymbolFont(String symbolFont) {
        this.symbolFont = symbolFont;
    }

    /**
     * Gets the value of the transform property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransform() {
        return transform;
    }

    /**
     * Sets the value of the transform property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransform(String value) {
        this.transform = value;
    }

    /**
     * Gets the value of the plotTrim property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlotTrim() {
        return plotTrim;
    }

    /**
     * Sets the value of the plotTrim property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlotTrim(String value) {
        this.plotTrim = value;
    }

    // create from metParamName for plotMode BARB and ARROW
    public  String[] getMetParamNamesForVectorPlot() {
    	if( metParamNamesForVectorPlot != null ) {
    		return metParamNamesForVectorPlot;
    	}
    	if( isVectorParameter() ) {    		
    		String[] vectPrms = getMetParamName().split(",");
    		
    		if( vectPrms != null && vectPrms.length == 2 ) {
    			metParamNamesForVectorPlot = vectPrms; 
    		}
    	}
    	return metParamNamesForVectorPlot;
    }

    // also confirm that there are 2 metParameters given?
    public Boolean isVectorParameter( ) {
    	return( plotMode.equalsIgnoreCase("barb") || 
        	    plotMode.equalsIgnoreCase("arrow") ? true : false );
    }

}
