//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.12.08 at 10:45:26 AM EST 
//


package gov.noaa.nws.ncep.viz.rsc.plotdata.plotModels.elements;

import gov.noaa.nws.ncep.viz.rsc.plotdata.advanced.ConditionalColorBar;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.eclipse.swt.graphics.RGB;

/**
 * <pre>
 * SOFTWARE HISTORY
 * 
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 *                  
 * 05/02/12     778         Q. Zhou     Changed symbol size form int to double    
 * 06/11/12     654         S. Gurung   Changed default textSize to 14     
 * 08/23/12     844         S. Gurung   Changed default textFont to Standard       
 * 10/18/2012   431         S. Gurung   Added support for ConditionalParameter and ConditionalColorBar     
 * 02/26/2013   936       A.Subramanian Changed the font defaults to match legacy 
 * </pre>
 * 
 */

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "position",
    "color",
    "conditionalParameter",
    "conditionalColorBar"
})
@XmlRootElement(name = "PlotModelElement")
public class PlotModelElement {

	// the Position will be either TC, UL, UC...MC...LR, BC
	// or it may be WD (wind barbs) or SC (sky coverage) which 
	// are drawn in the MC position. MC and WD or SC are mutually exclusive
    @XmlElement(name = "Position")
    protected String position;
    
    @XmlElement(name = "Color")
    protected Color color = new Color();
    
    @XmlAttribute
    protected String paramName=null;
    
    @XmlAttribute
    protected String textSize = "14"; // defaults
    
    @XmlAttribute
    protected String textFont = "Courier";
	
    @XmlAttribute
    protected String textStyle = "Bold";
    
    @XmlAttribute
    protected double symbolSize = 1.0;
    
    @XmlElement(name = "conditionalColorBar")
    protected ConditionalColorBar conditionalColorBar; 
    
    @XmlElement(name = "conditionalParameter")
    protected String conditionalParameter;
    
//    @XmlAttribute
//    protected Boolean enable=true;

    public String getPosition() {
        return position;
    }

    public void setPosition(String value) {
        this.position = value;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color value) {
        this.color = value;
    }

    public void setColorRGB( RGB rgb ) {
    	color = new Color();
    	color.red = rgb.red;
    	color.green = rgb.green;
    	color.blue = rgb.blue;
    }
    public String getParamName() {
        return paramName;
    }

    public void setParamName(String value) {
        this.paramName = value;
    }

    public String getTextSize() {
        return textSize;
    }

    public void setTextSize(String value) {
        this.textSize = value;
    }

    public String getTextFont() {
        return textFont;
    }

    public void setTextFont(String value) {
        this.textFont = value;
    }

    public String getTextStyle() {
        return textStyle;
    }

    public void setTextStyle(String value) {
        this.textStyle = value;
    }

    public Double getSymbolSize() {
        return symbolSize;
    }

    public void setSymbolSize(Double value) {
        this.symbolSize = value;
    }
    
//    public Boolean getEnable() {
//		return enable;
//	}

//	public void setEnable(Boolean enable) {
//		this.enable = enable;
//	}
    
    public ConditionalColorBar getConditionalColorBar() {
        return conditionalColorBar;
    }

    public void setConditionalColorBar(ConditionalColorBar value) {
    	
    	if (value.getNumIntervals() == 0 ) {
    		value.addColorBarInterval(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, new RGB(getColor().red, getColor().green, getColor().blue));
        }
    	this.conditionalColorBar = value;
    }
   
    public String getConditionalParameter() {
        return conditionalParameter;
    }

    public void setConditionalParameter(String value) {
        this.conditionalParameter = value;
    } 
    
    public boolean hasAdvancedSettings() {    	
    	
    	if (this.conditionalParameter ==null || "".equals(this.conditionalParameter) || this.conditionalColorBar == null) {
    		return false;
    	}
    	
    	if (this.conditionalParameter.equals(this.paramName) && this.conditionalColorBar.getNumIntervals() == 1
    			&& this.conditionalColorBar.getIntervalMin(0) == Float.NEGATIVE_INFINITY
					&& this.conditionalColorBar.getIntervalMax(0) == Float.POSITIVE_INFINITY) {
    		
    		if (this.conditionalColorBar.getColor(0) == null) {
    			return false;
    		}
    	
    		if (this.color.getRed() == this.conditionalColorBar.getColor(0).getRed()
				&& this.color.getGreen() == this.conditionalColorBar.getColor(0).getGreen()
					&& this.color.getBlue() == this.conditionalColorBar.getColor(0).getBlue()
						) {
				return false;  
			}
    	}
    	
		return true;    	
    }
}
